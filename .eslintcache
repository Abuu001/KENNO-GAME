[{"/media/lugonzo/New Volume/Web projects/React/kenno game/src/index.js":"1","/media/lugonzo/New Volume/Web projects/React/kenno game/src/App.js":"2","/media/lugonzo/New Volume/Web projects/React/kenno game/src/ModelView/ModelView.js":"3","/media/lugonzo/New Volume/Web projects/React/kenno game/src/Footbar/FootBar.js":"4","/media/lugonzo/New Volume/Web projects/React/kenno game/src/kennoContextAPI/KennoContextAPI.js":"5","/media/lugonzo/New Volume/Web projects/React/kenno game/src/kennoContextAPI/StackRangeAPI.js":"6","/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/MainView.js":"7","/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/TopComponent/TopComponent.js":"8","/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/MiddleComponent/NumberRange.js":"9","/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/TopComponent/RangeStack.js":"10","/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/TopComponent/Stake.js":"11","/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/MiddleComponent/Result.js":"12","/media/lugonzo/New Volume/Web projects/React/kenno game/src/utils/Spinner/Spinner.js":"13"},{"size":222,"mtime":1611729659628,"results":"14","hashOfConfig":"15"},{"size":615,"mtime":1611608912446,"results":"16","hashOfConfig":"15"},{"size":229,"mtime":1611303392809,"results":"17","hashOfConfig":"15"},{"size":1463,"mtime":1611729659401,"results":"18","hashOfConfig":"15"},{"size":328,"mtime":1611324050783,"results":"19","hashOfConfig":"15"},{"size":331,"mtime":1611608912471,"results":"20","hashOfConfig":"15"},{"size":1142,"mtime":1611729659426,"results":"21","hashOfConfig":"15"},{"size":316,"mtime":1611608912468,"results":"22","hashOfConfig":"15"},{"size":14417,"mtime":1611736942041,"results":"23","hashOfConfig":"15"},{"size":1725,"mtime":1611736942100,"results":"24","hashOfConfig":"15"},{"size":1251,"mtime":1611729659614,"results":"25","hashOfConfig":"15"},{"size":7162,"mtime":1611736942043,"results":"26","hashOfConfig":"15"},{"size":484,"mtime":1611729659733,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1an8ji7",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/media/lugonzo/New Volume/Web projects/React/kenno game/src/index.js",[],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/App.js",[],["57","58"],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/ModelView/ModelView.js",[],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/Footbar/FootBar.js",["59"],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/kennoContextAPI/KennoContextAPI.js",[],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/kennoContextAPI/StackRangeAPI.js",[],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/MainView.js",[],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/TopComponent/TopComponent.js",[],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/MiddleComponent/NumberRange.js",[],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/TopComponent/RangeStack.js",["60"],"import React,{useContext} from 'react'\nimport {StackRangeContext} from \"../../kennoContextAPI/StackRangeAPI\"\nimport \"./RangeStack.css\"\n\nfunction RangeStack() {\n\n    const [range,setRange] =useContext(StackRangeContext)\n\n    const optionStake=(id)=>{       \n\n        // let noOfStack;\n\n        // sets the size range of the stake slots\n        switch (id) {\n            case 3:\n                // noOfStack=range.splice(1,1,\"b\")\n                // setRange(noOfStack)\n                // setRange([\"a\",\"b\"])\n                setRange([\"a\",\"b\"])\n            break;\n    \n            case 4:\n                setRange([\"a\",\"b\",\"c\"])\n            break;  \n\n            case 5:\n                setRange([\"a\",\"b\",\"c\",\"d\"])\n            break;  \n\n            case 6:\n                setRange([\"a\",\"b\",\"c\",\"d\",\"e\"])    \n            break;  \n\n            case 7:\n                setRange([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"])      \n            break;  \n\n            default :\n                setRange([\"a\",\"b\",\"d\",\"e\"])\n        }\n    }     \n\n    return (\n        <div className=\"RangeStack\">\n            <button type=\"button\" className=\"btn btn-outline-success  btn_style\" onClick={()=>optionStake(3)}>3</button>\n            <button type=\"button\" className=\"btn btn-outline-success  btn_style\" onClick={()=>optionStake(4)}>4</button>\n            <button type=\"button\" className=\"btn btn-outline-success  btn_style\" onClick={()=>optionStake(5)} >5</button>\n            <button type=\"button\" className=\"btn btn-outline-success  btn_style\" onClick={()=>optionStake(6)} >6</button>\n            <button type=\"button\" className=\"btn btn-outline-success  btn_style\" onClick={()=>optionStake(7)} >7</button>\n        </div>\n    )\n} \n\nexport default RangeStack\n","/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/TopComponent/Stake.js",[],"/media/lugonzo/New Volume/Web projects/React/kenno game/src/MainView/MiddleComponent/Result.js",["61"],"import React,{useContext,useState} from 'react'\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {StackRangeContext} from \"../../kennoContextAPI/StackRangeAPI\"\nimport Spinner from \"../../utils/Spinner/Spinner\"\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport Popup from 'reactjs-popup';\nimport 'reactjs-popup/dist/index.css';\nimport \"./Result.css\"\n\nfunction Result({numbers,setNumbers,disableBtn,setDisableBtn}) {\n\n    const [range] =useContext(StackRangeContext)\n    const [randomNo,setRandomNo]=useState([])\n    const [checkResult,setCheckResult]=useState([])\n    const [correct,setCorrect]=useState(0)\n    const [emoji,setEmoji]=useState([])\n    const [time,setTime]=useState(false)\n\n    //to open the check result model\n    const [open, setOpen] = useState(false);\n    const closeModal = () =>{\n        setOpen(false);\n        setCheckResult([])\n        setCorrect(0)\n        setNumbers([])\n        setEmoji([])\n    } \n   \n    //clears the stake\n    const deleteHandler=()=>{\n        setNumbers([])\n        setCheckResult([])\n        setCorrect(0)\n        setEmoji([])\n    }\n \n    //selects a random num at range btwn 1 -48\n    const handleSelectRandom =()=>{\n        \n        // choosing random no according to  the no of times ifor the stake\n        for(let i=0; i< range.length+1 ; i++){\n            // const rand = Math.floor(Math.random() * (48 - 1) + 1);\n            const rand = Math.floor(Math.random() * (8 - 3) + 3);\n            randomNo.push(rand)\n            setRandomNo([...randomNo]);\n        }\n       \n       //  if(checkResult.length>0){\n           setRandomNo([])\n      //   }\n        setNumbers(randomNo)\n        setDisableBtn(prevState=>!prevState)\n        console.log(randomNo + \" --This is random no\");\n         \n    }\n\n    const checkResultsHandler=()=>{\n        setOpen(o => !o)\n     \n        for(let i=0; i< range.length+1 ; i++){\n            // const rand = Math.floor(Math.random() * (48 - 1) + 1);8-3\n            const rand = Math.floor(Math.random() * (8 - 3) + 3);\n            checkResult.push(rand)\n            // setCheckResult([...randomNo]);\n            setCheckResult([...checkResult]);\n        }\n\n        if(range.length+1   !== numbers.length){\n            setCheckResult([])\n        } \n      // setNumbers(randomNo)\n\n      //disable results btn after clicked\n        setDisableBtn(prevData =>!prevData)\n        console.log(checkResult + \"  results\");\n        console.log(numbers + \" numbers\");\n        console.log(checkResult.length + \"  results length\");\n\n        // checks if the result array matches with the stake numbers && !undefined\n        if(checkResult[0]===numbers[0] && numbers[0] !== undefined){\n            setCorrect(prevData=>prevData+1)\n            emoji.push('🟢'  )\n            setEmoji([...emoji])\n            console.log(\"first won\");\n        } \n\n        if(checkResult[1]===numbers[1] && numbers[1] !== undefined){\n            setCorrect(prevData=>prevData+1)\n            emoji.push('🟢'  )\n            setEmoji([...emoji])\n            console.log(\" second won\");\n        }\n\n        if(checkResult[2]===numbers[2] && numbers[2] !== undefined){\n            setCorrect(prevData=>prevData+1)\n            emoji.push('🟢'  )\n            setEmoji([...emoji])\n            console.log(\" third won\");\n        }\n\n        if(checkResult[3]===numbers[3] && numbers[3] !== undefined){\n            setCorrect(prevData=>prevData+1)\n            emoji.push('🟢'  )\n            setEmoji([...emoji])\n            console.log(\" fourth won\");\n        }\n\n        if(checkResult[4]===numbers[4] && numbers[4] !== undefined){\n            setCorrect(prevData=>prevData+1)\n            emoji.push('🟢'  )\n            setEmoji([...emoji])\n            console.log(\" fifth won\");\n        }\n        if(checkResult[5]===numbers[5]  && numbers[5] !== undefined ){\n            setCorrect(prevData=>prevData+1)\n            emoji.push('🟢'  )\n            setEmoji([...emoji])\n            console.log(\"sixth won\");\n        }\n\n        if(checkResult[6]===numbers[6] && numbers[6] !== undefined){\n            setCorrect(prevData=>prevData+1)\n            emoji.push('🟢'  )\n            setEmoji([...emoji])\n            console.log(\" last won\");\n        }\n\n    }\n   //sets a green ball  emoji for each correct score \n    const greenBall = emoji.map(corr=> corr  );\n\n    // loops through the selected numbers\n    const noOfRoom = numbers.map((row,index)=>{\n        //sets a random time to display the results\n        const randTme = Math.floor(Math.random() * (6 - 3) + 3);\n        setTimeout(()=>{\n            setTime(!time)\n        },randTme* 1000)\n        return(\n            <div  className='Result__Row'   key={index} >  \n                <input type=\"text\" value={row}   className=\"Result_Row_InputField\" disabled/> \n            </div>\n        )\n    })\n\n    const resultsLoop=checkResult.map((res,indx)=>{\n       \n        return(\n            <div className='Result__Row' key={indx}>\n            <input type=\"text\" value={res}   className=\"Result_Row_InputField\" disabled/> \n            </div>\n        )\n    })\n\n    setTimeout(()=>{\n        <div className=\"Number__Button__Row  Number__Row__Modal\">\n        <p>Result : </p>\n        <span> {resultsLoop}</span>\n    </div> \n    },4000)\n    return (\n        <div  className=\"Result\">\n            <div className=\"Number__Button__Row\">\n                <AutorenewIcon fontSize=\"large\" color=\"action\" className=\"Result__Icon\" onClick={handleSelectRandom}/>\n                   {noOfRoom}\n                <CloseIcon  fontSize=\"large\" color=\"error\"  className=\"Result__Icon\"   onClick={()=>deleteHandler()}/> \n            </div>\n            <hr></hr>\n            \n        <div className=\"Result__Score\"> \n          <button type=\"button\" className={` ${ disableBtn === true  ?  `btn btn-outline-success Result__Score__btn` : `btn btn-outline-success`}  `}   onClick={checkResultsHandler} disabled={disableBtn}  > check results</button>\n        </div>\n        \n          <Popup open={open} closeOnDocumentClick onClose={closeModal}  className=\"modal\">\n\n            <div id=\"closeModal\">\n                <a className=\"close\"  href=\"#\" onClick={closeModal}>\n                &times;\n            </a>\n                <div></div>\n            </div>\n        \n            <span> Score  <AssignmentIcon /> {correct >=2 ? <span  style={{color: 'green'}}>Good Keep Trying!! '👏👏👏'</span> : <span style={{color: 'red'}}>Looser !! '😭😭😭😭'</span> }</span>\n            <p>Your score: {correct}    {greenBall}</p>\n            {/* <p> {numbers.length === range.length+1  ?  <span>Checking Results  <Spinner /> </span> :  null}</p> */}\n            <div className=\"Number__Button__Row  Number__Row__Modal\"> \n                <p>Your Stake :  </p> \n               <span>{noOfRoom}</span> \n            </div>\n            <hr></hr>\n        \n            <div className=\"Number__Button__Row  Number__Row__Modal\">\n                <p>Result : </p>\n                <span> {time ?  resultsLoop : <Spinner/>}</span>\n            </div>\n        \n        </Popup>\n  \n\n\n        </div>\n    )\n}\n\nexport default Result\n","/media/lugonzo/New Volume/Web projects/React/kenno game/src/utils/Spinner/Spinner.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":31,"column":17,"nodeType":"68","endLine":31,"endColumn":69},{"ruleId":"69","severity":1,"message":"70","line":7,"column":12,"nodeType":"71","messageId":"72","endLine":7,"endColumn":13},{"ruleId":"66","severity":1,"message":"67","line":154,"column":21,"nodeType":"68","endLine":154,"endColumn":73},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]